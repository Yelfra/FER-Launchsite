import numpy as np
import scipy.signal as signal
import soundfile as sf
import matplotlib.pyplot as plt

def delay(input_signal, fs, delay_time):
    # Calculate delay samples using delay time
    delay_samples = int(fs * delay_time)

    # Create delay filter by shifting input_signal by delay samples
    delay_filter = np.pad(input_signal, (delay_samples, 0), 'constant')
    # Expand input signal to match delay filter length
    input_signal = np.pad(input_signal, (0, delay_samples), 'constant')

    output_signal = input_signal + delay_filter

    # Normalize the output signal to avoid clipping
    output_signal /= np.max(np.abs(output_signal))

    return output_signal

# Load input signal from file
input_signal, fs = sf.read('audio_rising-sun.ogg')

# Set reverb parameters
delay_time = 0.25 # seconds
decay_time = 1 # seconds
diffusion = 4
pre_delay_time = 0.02 # seconds
feedback = 0.5
output_signal = delay(input_signal, fs, delay_time)

# Pad input signal with zeros to match output signal length
input_signal = np.pad(input_signal, (0, len(output_signal) - len(input_signal)), 'constant')
#input_signal /= np.max(np.abs(input_signal))

# Create time axis in seconds
time_axis = np.arange(len(input_signal)) / fs

# Plot input and output signals
fig, graph = plt.subplots()
graph.plot(time_axis, output_signal, label='Output')
graph.plot(time_axis, input_signal, label='Input')
graph.legend()
graph.set_xlabel('Time (s)')
graph.set_ylabel('Amplitude')
graph.set_title('Delay Effect')
plt.show()

# Save output signal to file
sf.write('output_signal.wav', output_signal, fs)